swagger: '2.0'
info:
  title: FastScore API (proxy)
  version: '1.6'
schemes:
  - https
basePath: /api/1/service

parameters:
  instance:
    name: instance
    description: instance name
    type: string
    in: path
    required: true
  tap-id:
    name: tap-id
    description: installed sensor id
    type: integer
    in: path
    required: true
  slot:
    name: slot
    description: stream slot number
    type: integer
    in: path
    required: true

paths:
  /{instance}/2/active/sensor:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_list
      responses:
        200:
          description: active sensor list
          schema:
            type: array
            items:
              $ref: ./types-v2.yaml#/ActiveSensorInfo
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: desc
          description: sensor descriptor
          in: body
          schema:
            $ref: ./types-v2.yaml#/SensorDescriptor
          required: true
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_install
      responses:
        200:
          description: sensor install ok
          schema:
            type: object
            properties:
              id: { type: integer }
        400: { description: sensor install error }

  /{instance}/2/active/sensor/{tap-id}:
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/tap-id"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_uninstall
      responses:
        204: { description: sensor uninstall ok }
        400: { description: sensor uninstall error }
        404: { description: sensor not found }

  /{instance}/2/active/sensor/points:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_points
      responses:
        200:
          description: tapping point list
          schema:
            type: array
            items: { type: string }
 
  /{instance}/2/engine/pause:
    post:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: engine_pause
      responses:
        204: { description: paused ok }
        400: { description: pausing error }

  /{instance}/2/engine/unpause:
    post:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: engine_unpause
      responses:
        204: { description: unpaused ok }
        400: { description: unpausing error }

  /{instance}/2/engine/state:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: engine_state_get
      responses:
        200:
          description: engine state
          schema:
            type: object
            properties:
              state: { type: string }

  /{instance}/2/engine/reset:
    post:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: engine_reset
      responses:
        204: { description: reset ok }
        400: { description: reset error }

  /{instance}/2/active/model:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: active_model_get
      responses:
        200:
          description: active model info
          schema:
            $ref: ./types-v2.yaml#/ActiveModelInfo
        404: { description: model not loaded }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: active_model_delete
      responses:
        204: { description: model unload ok }
        400: { description: model unload error }
        404: { description: model not loaded }

  /{instance}/2/active/model/scale:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: factor
          description: jet count
          in: body
          schema:
            type: integer
          required: true
      tags:
        - Engine
      operationId: active_model_scale
      responses:
        204: { description: scale ok }
        400: { description: scale error }
 
  /{instance}/2/active/stream:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: active_stream_list
      responses:
        200:
          description: active stream list
          schema:
            type: array
            items:
              $ref: ./types-v2.yaml#/ActiveStreamInfo

  /{instance}/2/active/stream/{slot}:
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - name: desc
          description: The stream descriptor
          in: body
          schema:
            $ref: ./types-v2.yaml#/StreamDescriptor
          required: true
        - $ref: "#/parameters/slot"
        - name: dry-run
          description: verificaton only
          in: query
          type: boolean
        - name: Content-Disposition
          description: pass stream name
          type: string
          in: header
      tags:
        - Engine
      operationId: active_stream_attach
      responses:
        200:
          description: stream ok - dry run
          schema:
            type: object
            #$ref: ./types-v2.yaml#/StreamDescriptorInt
        204: { description: stream attached ok }
        400: { description: stream attach error }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/slot"
      tags:
        - Engine
      operationId: active_stream_detach
      responses:
        204: { description: stream detached ok }
        400: { description: stream detach error }
        404: { description: stream not found }

  /{instance}/2/active/schema/verify:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: schema
          description: Avro schema
          in: body
          schema:
            type: object
          required: true
      tags:
        - Engine
      operationId: active_schema_verify
      responses:
        200:
          description: schema ok
          schema:
            type: object
            properties:
              id: { type: integer }
        400: { description: schema invalid }

  /{instance}/2/active/schema/verify/{sid}:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: sid
          descripton: schema id
          in: path
          type: integer
          required: true
        - name: record
          description: data record to verify
          in: body
          schema:
            type: object
          required: true
      tags:
        - Engine
      operationId: active_schema_verify_data
      responses:
        204: { description: data ok }
        400: { description: data invalid }
 
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - name: sid
          descripton: schema id
          in: path
          type: integer
          required: true
      tags:
        - Engine
      operationId: active_schema_unverify
      responses:
        204: { description: schema removed }

  /{instance}/2/pneumo:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
      operationId: pneumo_get
      responses:
        200:
          description: buffered pneumo messages
          schema:
            type: array
            items:
              # PneumoMsg-derived - see types-v2.yaml
              type: object
 
