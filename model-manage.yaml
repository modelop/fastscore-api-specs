swagger: '2.0'

##
## FastScore Model Manage API
##

info:
  title: FastScore Model Manage API
  version: '1.3'

paths:
  /1/swagger:
    get:
      operationId: swagger_get
      produces:
        - application/json
      responses:
        200:
          description: Returns the present API specification

  /1/health:
    get:
      operationId: health_get
      produces:
        - application/json
      responses:
        200:
          description: Indicates that the service is healthy
          schema:
            $ref: ./types.yaml#/HealthInfo

  /1/model:
    get:
      operationId: model_list
      parameters:
        - name: return
          description: A comma-separated list of fields to return
          type: string
          in: query
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of model names or model info objects
          schema:
            type: array
            items:
              type: string
##                  ^
## GET /1/model may also return an array of objects of ModelInfo type.
## Unfortunately, Swagger does not support anyOf specifications.
##
        403:
          description: "Invalid parameter provided"

  /1/model/{model}:
    parameters:
      - name: model
        description: The name of the model to retrieve
        type: string
        in: path
        required: true
    get:
      operationId: model_get
      produces:
        - application/vnd.fastscore.model-pfa+json
        - application/vnd.fastscore.model-pfa-json
        - application/vnd.fastscore.model-pfa-yaml
        - application/vnd.fastscore.model-pfa-pretty
        - application/vnd.fastscore.model-python
        - application/vnd.fastscore.model-python2
        - application/vnd.fastscore.model-python3
        - application/vnd.fastscore.model-r
        - application/vnd.fastscore.model-c
        - application/vnd.fastscore.model-java
        - application/vnd.fastscore.model-scala
        - application/vnd.fastscore.model-erlang
      responses:
        200: { description: Returns the source code of the requested model }
        404: { description: Model not found }
        
    put:
      operationId: model_add
      consumes:
        - application/vnd.fastscore.model-pfa+json
        - application/vnd.fastscore.model-pfa-json
        - application/vnd.fastscore.model-pfa-yaml
        - application/vnd.fastscore.model-pfa-pretty
        - application/vnd.fastscore.model-python
        - application/vnd.fastscore.model-python2
        - application/vnd.fastscore.model-python3
        - application/vnd.fastscore.model-r
        - application/vnd.fastscore.model-c
        - application/vnd.fastscore.model-java
        - application/vnd.fastscore.model-scala
        - application/vnd.fastscore.model-erlang
        ## OBSOLETE - DO NOT USE
        - application/vnd.pfa+json
        - application/json
        - application/vnd.ppfa
        - application/x-yaml
        - application/x-r
        - application/x-python
        - application/x-python2
        - application/x-python3
      responses:
        201: { description: The model successfully added }
        204: { description: The model successfully updated }

    delete:
      operationId: model_delete
      responses:
        204: { description: The model successfully deleted }
        404: { description: Model not found }

  /1/model/{model}/attachment:
    parameters:
      - name: model
        description: The name of the model to list attachments
        type: string
        in: path
        required: true
    get:
      operationId: attachment_list
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of attachments of the given model
          schema:
            type: array
            items:
              type: string
        403: { description: Model not found }

  /1/model/{model}/attachment/{attachment}:
    parameters:
      - name: model
        description: The name of the model of the attachment
        type: string
        in: path
        required: true
      - name: attachment
        description: The name of the attachment
        type: string
        in: path
        required: true
    head:
      operationId: attachment_head
      responses:
        200: { description: The Content-Length header contains the attachment size }
        404: { description: Attachment not found }
    get:
      operationId: attachment_get
      produces:
        - application/zip
        - application/gzip
      responses:
        200: { description: Returns the contents of the attachment }
        404: { description: Attachment not found }
    put:
      operationId: attachment_add
      consumes:
        - application/zip
        - application/gzip
      responses:
        201: { description: The attachment successfully added }
        204: { description: The attachment successfully updated }

    delete:
      operationId: attachment_delete
      responses:
        201: { description: The attachment successfully deleted }
        404: { description: Attachment not found }

  /1/model/{model}/snapshot:
    parameters:
      - name: model
        description: The name of the model to list snapshots
        type: string
        in: path
        required: true
      - name: count
        description: The maximum number of items to return
        type: integer
        in: query
      - date-range
        description: The range of snapshot dates, e.g. 2017-04-11--2017-04-13
    get:
      operationId: snapshot_list
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of snapshots of the given model
          schema:
            type: array
            items:
              type: object
        403: { description: Model not found }

  /1/model/{model}/snapshot/{snap-id-prefix}:
    parameters:
      - name: model
        description: The name of the model
        type: string
        in: path
        required: true
      - name: snap-id-prefix
        description: The (prefix of the id ) of the snapshot
        type: string
        in: path
        required: true
    get:
      operationId: snapshot_get
      produces:
        - multipart/mixed
      responses:
        200: { description: Returns the snapshot metadata and its contents }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }
    put:
      operationId: snapshot_add
      consumes:
        - multipart/mixed
      responses:
        201: { description: The snapshot successfully added }
        400: { description: The snapshot id is too short (one possibility) }
        403: { description: The snapshot already exists }

    delete:
      operationId: snapshot_delete
      responses:
        201: { description: The snapshot successfully deleted }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }

  /1/model/{model}/snapshot/{snap-id-prefix}/metadata:
    parameters:
      - name: model
        description: The name of the model
        type: string
        in: path
        required: true
      - name: snap-id-prefix
        description: The (prefix of the id ) of the snapshot
        type: string
        in: path
        required: true
    get:
      operationId: snapshot_get
      produces:
        - application/json
      responses:
        200: { description: Returns the snapshot metadata }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }
 
  /1/schema:
    get:
      operationId: schema_list
      produces:
        - application/json
      responses:
        200: { description: Returns the list of registered schemas }

  /1/schema/{schema}:
    parameters:
      - name: schema
        description: The name of the schema
        type: string
        in: path
        required: true
    get:
      operationId: schema_get
      produces:
        - application/json
      responses:
        200: { description: Returns the schema contents }
        404: { description: Schema not found }
    put:
      operationId: schema_put
      consumes:
        - application/json
      responses:
        201: { description: The schema successfully added }
        204: { description: The schema successfully updated } 
    delete:
      operationId: schema_delete
      responses:
        204: { description: The schema successfully deleted }
        404: { description: Schema not found }

  /1/stream:
    get:
      operationId: stream_list
      produces:
        - application/json
      responses:
        200: { description: Returns the list of stream descriptors }

  /1/stream/{stream}:
    parameters:
      - name: stream
        description: The name of the stream
        type: string
        in: path
        required: true
    get:
      operationId: stream_get
      produces:
        - application/json
      responses:
        200: { description: Returns the stream descriptor }
        404: { description: Stream not found }
    put:
      operationId: stream_put
      consumes:
        - application/json
      responses:
        201: { description: The stream successfully added }
        204: { description: The stream successfully updated } 
    delete:
      operationId: stream_delete
      responses:
        204: { description: The stream successfully deleted }
        404: { description: Stream not found }

  /1/sensor:
    get:
      operationId: sensor_list
      produces:
        - application/json
      responses:
        200: { description: Returns the list of sensor descriptors }

  /1/sensor/{sensor}:
    parameters:
      - name: sensor
        description: The name of the sensor
        type: string
        in: path
        required: true
    get:
      operationId: sensor_get
      produces:
        - application/json
      responses:
        200: { description: Returns the sensor descriptor }
        404: { description: Sensor not found }
    put:
      operationId: sensor_put
      consumes:
        - application/json
      responses:
        201: { description: The sensor successfully added }
        204: { description: The sensor successfully updated } 
    delete:
      operationId: sensor_delete
      responses:
        204: { description: The sensor successfully deleted }
        404: { description: Sensor not found }

##
## Sensor control provided by the 'sensible' application
##

  /1/control/sensor:            { $ref: ./sensible.yaml#/list-all }
  /1/control/sensor/available:  { $ref: ./sensible.yaml#/list-available }
  /1/control/sensor/{id}:       { $ref: ./sensible.yaml#/tap-control }

