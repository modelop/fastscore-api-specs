swagger: '2.0'
info:
  title: FastScore API (proxy)
  version: '1.5'
schemes:
  - https
basePath: /api/1/service

parameters:
  instance:
    name: instance
    description: instance name
    type: string
    in: path
    required: true
  model:
    name: model
    description: model name
    type: string
    in: path
    required: true
  attachment:
    name: attachment
    description: attachment name
    type: string
    in: path
    required: true
  snap-id-prefix:
    name: snap-id-prefix
    description: The (prefix of the id ) of the snapshot
    type: string
    in: path
    required: true
  schema:
    name: schema
    description: The name of the schema
    type: string
    in: path
    required: true
  stream:
    name: stream
    description: The name of the stream
    type: string
    in: path
    required: true
  sensor:
    name: sensor
    description: The name of the sensor
    type: string
    in: path
    required: true
  tap-id:
    name: tap-id
    description: The identifier of the sensor connection
    type: integer
    in: path
    required: true

paths:
  /1/login:

  ## The login endpoint is special. It does not take an 'instance' parameter as
  ## it belongs to the API proxy itself. In addition, the login endpoint
  ## requires the base path set to ''. For example,
  ##
  ## from v1 import Configuration # a singleton
  ## conf = Configuration()
  ## conf.host = 'https://localhost'

    post:
      tags:
        - Login
      operationId: login_post
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          description: user name
          type: string
          in: formData
          required: true
        - name: password
          description: password
          type: string
          in: formData
          required: true
      responses:
        200: { description: Login successful }

  /{instance}/1/health:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: health_get
      produces:
        - application/json
      responses:
        200:
          description: Indicates that the instance is healthy
          schema:
            $ref: ./types.yaml#/HealthInfo

  /{instance}/1/swagger:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: Accept
          description: Force Accept header value
          type: string
          in: header
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: swagger_get
      produces:
        - application/json
        - application/x-yaml
      responses:
        200:
          description: The service Swagger API specification
          schema:
            type: object

  /{instance}/1/config:
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - name: config
          description: The FastScore Configuration
          in: body
          schema:
            type: string
          required: true
        - name: Content-Type
          description: configuration MIME type
          type: string
          in: header
      tags:
        - Connect
      operationId: config_put
      consumes:
        - application/x-yaml
        - application/json
      responses:
        204: { description: The configuration updated successfully }
        400: { description: Malformed YAML }
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: q
          description: Request only the named section
          type: string
          in: query
        - name: Accept
          description: Force Accept header value
          type: string
          in: header
      tags:
        - Connect
      operationId: config_get
      produces:
        - application/x-yaml
        - application/json
        - text/plain
      responses:
        200:
          description: Returns the (section of the) current configuration
          schema:
            type: object
        404: { description: The configuration not set or section missing }

  /{instance}/1/connect:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: name
          description: Return info for the named service only
          type: string
          in: query
        - name: api
          description: Return only services providing the named API
          type: string
          in: query
        - name: host
          description: Return only services running on the named host
          type: string
          in: query
        - name: port
          description: Return only services that use this port
          type: integer
          in: query
        - name: release
          description: Return only services that run the specific release
          type: string
          in: query
        - name: health
          description: Return only services with the given health status
          type: string
          in: query
        - name: return
          description: A comma-separated list of fields to return
          type: string
          in: query
      tags:
        - Connect
      operationId: connect_get
      produces:
        - application/json
        - text/plain
      responses:
        200:
          description: The information about the FastScore fleet
          schema:
            type: array
            items: { $ref: ./types.yaml#/InstanceInfo }
        403: { description: The configuration not set yet }

  /{instance}/1/model:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: return
          description: A comma-separated list of fields to return
          type: string
          in: query
      tags:
        - ModelManage
      operationId: model_list
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of model names or model info objects
          schema:
            type: array
            items:
              type: object
        403: { description: Invalid parameter provided }

  /{instance}/1/model/{model}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
      tags:
        - ModelManage
      operationId: model_get
      produces:
        - application/vnd.fastscore.model-pfa+json
        - application/vnd.fastscore.model-pfa-json
        - application/vnd.fastscore.model-pfa-yaml
        - application/vnd.fastscore.model-pfa-pretty
        - application/vnd.fastscore.model-python
        - application/vnd.fastscore.model-python2
        - application/vnd.fastscore.model-python3
        - application/vnd.fastscore.model-r
        - application/vnd.fastscore.model-c
        - application/vnd.fastscore.model-java
#       - application/vnd.fastscore.model-scala
#       - application/vnd.fastscore.model-erlang
      responses:
        200:
          description: Returns the source code of the requested model
          schema:
            type: string
        404: { description: Model not found }

    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - name: source
          description: The model source
          in: body
          schema:
            type: string
            format: binary
          required: true
        - name: Content-Type
          description: model MIME type
          type: string
          in: header
      tags:
        - ModelManage
      operationId: model_put
#      consumes:
#        - application/vnd.fastscore.model-pfa+json
#        - application/vnd.fastscore.model-pfa-json
#        - application/vnd.fastscore.model-pfa-yaml
#        - application/vnd.fastscore.model-pfa-pretty
#        - application/vnd.fastscore.model-python
#        - application/vnd.fastscore.model-python2
#        - application/vnd.fastscore.model-python3
#        - application/vnd.fastscore.model-r
#        - application/vnd.fastscore.model-c
#        - application/vnd.fastscore.model-java
#        - application/vnd.fastscore.model-scala
#        - application/vnd.fastscore.model-erlang
#        ## OBSOLETE - DO NOT USE
#        - application/vnd.pfa+json
#        - application/json
#        - application/vnd.ppfa
#        - application/x-yaml
#        - application/x-r
#        - application/x-python
#        - application/x-python2
#        - application/x-python3
      responses:
        201: { description: The model successfully added }
        204: { description: The model successfully updated }

    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
      tags:
        - ModelManage
      operationId: model_delete
      responses:
        204: { description: The model successfully deleted }
        404: { description: Model not found }

  /{instance}/1/model/{model}/attachment:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
      tags:
        - ModelManage
      operationId: attachment_list
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of attachments of the given model
          schema:
            type: array
            items:
              type: string
        403: { description: Model not found }

  /{instance}/1/model/{model}/attachment/{attachment}:
    head:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/attachment"
      tags:
        - ModelManage
      operationId: attachment_head
      responses:
        200: { description: The Content-Length header contains the attachment size }
        404: { description: Attachment not found }
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/attachment"
      tags:
        - ModelManage
      operationId: attachment_get
      produces:
        - application/zip
        - application/gzip
      responses:
        200:
          description: Returns the contents of the attachment
          schema:
            type: file
        404: { description: Attachment not found }
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/attachment"
        - name: data
          description: attachment data
          in: body
          schema:
            type: string
            format: binary
          required: true
        - name: Content-Type
          description: attachment MIME type
          type: string
          in: header
          required: true
      tags:
        - ModelManage
      operationId: attachment_put
      consumes:
        - application/gzip
        - application/zip
      responses:
        201: { description: The attachment successfully added }
        204: { description: The attachment successfully updated }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/attachment"
      tags:
        - ModelManage
      operationId: attachment_delete
      responses:
        201: { description: The attachment successfully deleted }
        404: { description: Attachment not found }

  /{instance}/1/model/{model}/snapshot:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - name: count
          description: The maximum number of items to return
          type: integer
          in: query
        - name: date-range
          description: The range of snapshot dates, e.g. 2017-04-11--2017-04-13
          type: string
          in: query
      tags:
        - ModelManage
      operationId: snapshot_list
      produces:
        - application/json
      responses:
        200:
          description: Returns a list of snapshots of the given model
          schema:
            type: array
            items:
              type: object
        403: { description: Model not found }

  /{instance}/1/model/{model}/snapshot/{snap-id-prefix}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/snap-id-prefix"
      tags:
        - ModelManage
      operationId: snapshot_get
      produces:
        - multipart/mixed
      responses:
        200: { description: Returns the snapshot metadata and its contents }
        300: { description: The id prefix is ambiguous }
        403: { description: Model not found }
        404: { description: Snapshot not found }
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/snap-id-prefix"
      tags:
        - ModelManage
      operationId: snapshot_put
      consumes:
        - multipart/mixed
        - multipart/form-data
      responses:
        201: { description: The snapshot successfully added }
        400: { description: The snapshot already exists (one possibility) }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/snap-id-prefix"
      tags:
        - ModelManage
      operationId: snapshot_delete
      responses:
        204: { description: The snapshot successfully deleted }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }

  /{instance}/1/model/{model}/snapshot/{snap-id-prefix}/metadata:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/snap-id-prefix"
      tags:
        - ModelManage
      operationId: snapshot_get_metadata
      produces:
        - application/json
      responses:
        200: { description: Returns the snapshot metadata }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }

  /{instance}/1/model/{model}/snapshot/{snap-id-prefix}/contents:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/model"
        - $ref: "#/parameters/snap-id-prefix"
      tags:
        - ModelManage
      operationId: snapshot_get_contents
      produces:
        - application/json
      responses:
        200: { description: Returns the snapshot contents }
        300: { description: The id prefix is ambiguous }
        404: { description: Snapshot not found }

  /{instance}/1/schema:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - ModelManage
      operationId: schema_list
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of registered schemas
          schema:
            type: array
            items:
              type: string

  /{instance}/1/schema/{schema}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/schema"
      tags:
        - ModelManage
      operationId: schema_get
      produces:
        - application/json
      responses:
        200:
          description: Returns the schema contents
          schema:
            type: object
        404: { description: Schema not found }
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/schema"
        - name: source
          description: The schema source
          in: body
          schema:
            type: object
          required: true
      tags:
        - ModelManage
      operationId: schema_put
      consumes:
        - application/json
      responses:
        201: { description: The schema successfully added }
        204: { description: The schema successfully updated }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/schema"
      tags:
        - ModelManage
      operationId: schema_delete
      responses:
        204: { description: The schema successfully deleted }
        404: { description: Schema not found }

  /{instance}/1/stream:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - ModelManage
      operationId: stream_list
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of stream descriptors
          schema:
            type: array
            items:
              type: string

  /{instance}/1/stream/{stream}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/stream"
      tags:
        - ModelManage
      operationId: stream_get
      produces:
        - application/json
      responses:
        200:
          description: Returns the stream descriptor
          schema:
            type: object
        404: { description: Stream not found }
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/stream"
        - name: desc
          description: The stream descriptor
          in: body
          schema:
            type: object
          required: true
      tags:
        - ModelManage
      operationId: stream_put
      consumes:
        - application/json
      responses:
        201: { description: The stream successfully added }
        204: { description: The stream successfully updated }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/stream"
      tags:
        - ModelManage
      operationId: stream_delete
      responses:
        204: { description: The stream successfully deleted }
        404: { description: Stream not found }

  /{instance}/1/sensor:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - ModelManage
      operationId: sensor_list
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of sensor descriptors
          schema:
            type: array
            items:
              type: string

  /{instance}/1/sensor/{sensor}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/sensor"
      tags:
        - ModelManage
      operationId: sensor_get
      produces:
        - application/json
      responses:
        200:
          description: Returns the sensor descriptor
          schema:
            type: object
        404: { description: Sensor not found }
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/sensor"
        - name: desc
          description: The sensor descriptor
          in: body
          schema:
            type: object
          required: true
      tags:
        - ModelManage
      operationId: sensor_put
      consumes:
        - application/json
      responses:
        201: { description: The sensor successfully added }
        204: { description: The sensor successfully updated }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/sensor"
      tags:
        - ModelManage
      operationId: sensor_delete
      responses:
        204: { description: The sensor successfully deleted }
        404: { description: Sensor not found }

  /{instance}/1/control/sensor:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_list
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of attached sensors
          schema:
            type: array
            items:
              type: object
              required:
                - id
                - tap
                - active
              properties:
                id: { type: integer }
                tap: { type: string }
                active: { type: boolean }
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: desc
          description: sensor descriptor
          in: body
          schema:
            type: object
          required: true
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_attach
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: The sensor attached successfully
          schema:
            type: object
            properties:
              id:
                description: The identifier of the sensor connection
                type: integer
        400: { description: The sensor descriptor is invalid }

  /{instance}/1/control/sensor/available:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_available
      produces:
        - application/json
      responses:
        200:
          description: Returns the list of tapping points
          schema:
            type: array
            items:
              type: string

  /{instance}/1/control/sensor/{tap-id}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/tap-id"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_describe
      produces:
        - application/json
        - text/plain
      responses:
        200:
          description: Returns the information about the sensor connection
          schema:
            type: object
            properties:
              id: { type: integer }
              tap: { type: string }
              permanent: { type: boolean }
        404: { description: The sensor connection not found }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
        - $ref: "#/parameters/tap-id"
      tags:
        - Connect
        - ModelManage
        - Engine
      operationId: active_sensor_detach
      responses:
        204: { description: The sensor successfully detached }
        404: { description: Sensor connection not found }

  /{instance}/1/stream/sample:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: desc
          description: The stream descriptor to get sample data from
          in: body
          schema:
            type: string
          required: true
        - name: n
          description: The number of data items to read from the stream
          type: integer
          in: query
      tags:
        - Engine
      operationId: stream_sample
      consumes:
        - application/json
      responses:
        200:
          description: Sample data successfully read
          schema:
            type: array
            items:
              type: string
        400: { description: The stream descriptor is invalid }

  /{instance}/1/stream/rate:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: stream
          description: The stream descriptor to measure data rate
          in: body
          schema:
            type: string
          required: true
      tags:
        - Engine
      operationId: stream_rate
      produces:
        - application/json
      responses:
        200:
          description: The data rates measured successfully
          schema:
            type: array
            items:
              type: object
              required:
                - rps
                - mbps
              properties:
                rps:
                  description: Records per second
                  type: number
                mbps:
                  description: Megabytes per second
                  type: number
        400: { description: Stream descriptor invalid or stream too short }

  /{instance}/1/job/model:
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - name: data
          description: model+attachments
          in: body
          schema:
            type: string
          required: true
        - name: Content-Type
          description: model MIME type
          type: string
          in: header
        - name: Content-Disposition
          description: pass model name
          type: string
          in: header

## Swagger 2.0 does not allow setting up Content-Type for individual parameters.
## It also does not allow dynamic number of parameters (attachments). Thus we
## resort to manually-crafted request body.
##

      tags:
        - Engine
      operationId: model_load
#      consumes:
#        ## A model with attachments
#        - multipart/mixed
#        - multipart/form-data
#        ## A model without attachments
#        - application/vnd.fastscore.model-pfa+json
#        - application/vnd.fastscore.model-pfa-json
#        - application/vnd.fastscore.model-pfa-yaml
#        - application/vnd.fastscore.model-pfa-pretty
#        - application/vnd.fastscore.model-python
#        - application/vnd.fastscore.model-python2
#        - application/vnd.fastscore.model-python3
#        - application/vnd.fastscore.model-r
#        - application/vnd.fastscore.model-c
#        - application/vnd.fastscore.model-java
#        - application/vnd.fastscore.model-scala
#        - application/vnd.fastscore.model-erlang

## The body of the request may contain the source code of the model or a model
## and its attachments. An attachment can be inline or be externalized.
## See https://opendatagoup.atlassian.net/wiki/display/FAS/Working+with+large+attachments
##
      responses:
        204: { description: The model successfully added to the engine }
        400: { description: See the error message - a lot can go wrong }
    delete:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: model_unload
      responses:
        204: { description: The model unloaded successfully }

  /{instance}/1/job/stream/in:
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - name: stream
          description: The input stream descriptor
          schema:
            type: object
          in: body
          required: true
      tags:
        - Engine
      operationId: input_stream_set
      consumes:
        - application/json
      responses:
        204: { description: The input stream set successfully }
        400: { description: Invalid stream descriptor }

  /{instance}/1/job/stream/out:
    put:
      parameters:
        - $ref: "#/parameters/instance"
        - name: stream
          description: The output stream descriptor
          schema:
            type: string
          in: body
          required: true
      tags:
        - Engine
      operationId: output_stream_set
      consumes:
        - application/json
      responses:
        204: { description: The output stream set successfully }
        400: { description: Invalid stream descriptor }

  /{instance}/1/job:
    delete:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: job_delete
      responses:
        204: { description: The engine stopped }

  /{instance}/1/job/scale:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: n
          description: The number of jets to scale model to
          type: integer
          in: query
          required: true
      tags:
        - Engine
      operationId: job_scale
      responses:
        204: { description: The model scaled successfully }
        403: { description: Invalid parameter }

  /{instance}/1/job/status:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: return
          description: A comma-separated list of field names (input, output, model, jets)
          type: string
          in: query
      tags:
        - Engine
      operationId: job_status
      produces:
        - application/json
      responses:
        200:
          description: Returns the engine status information
          schema: { $ref: ./types.yaml#/StatusInfo }

  /{instance}/1/job/statistics:
    delete:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: reset_statistics
      responses:
        204: { description: Statistics counters reset successfully }

  /{instance}/1/job/sample/cpu:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: duration
          description: The number of seconds to sample CPU usage for
          type: integer
          in: query
      tags:
        - Engine
      operationId: job_sample_cpu
      produces:
        - application/json
      responses:
        200:
          description: CPU usage data collected successfully
          schema: { $ref: ./types.yaml#/CpuUsageInfo }
        403: { description: Invalid parameter }

  /{instance}/1/job/input:
    post:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: job_io_input1
      responses:
        204: { description: Data put to REST stream trasport id 1 }
        403: { description: REST stream transport id 1 not found }

  /{instance}/1/job/input/{id}:
    post:
      parameters:
        - $ref: "#/parameters/instance"
        - name: data
          description: Input data
          in: body
          schema:
            type: string
          required: true
        - name: id
          description: REST stream transport id
          type: integer
          in: path
          required: true
      tags:
        - Engine
      consumes:
        - application/octet-stream
      operationId: job_io_input
      responses:
        204: { description: Data put to REST stream trasport }
        403: { description: REST stream transport not found }

  /{instance}/1/job/output:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: job_io_output1
      responses:
        200: { description: Retrieves a data chunk from REST stream transport id 1 }
        403: { description: REST stream transport id 1 not found }

  /{instance}/1/job/output/{id}:
    get:
      parameters:
        - $ref: "#/parameters/instance"
        - name: id
          description: REST stream transport id
          type: integer
          in: path
          required: true
      tags:
        - Engine
      operationId: job_io_output
      produces:
        - application/octet-stream
      responses:
        200:
          description: Retrieves a data chunk from REST stream transport
          schema:
            type: string
        403: { description: REST stream transport not found }

  /{instance}/1/job/model/state:
    put:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: job_state_restore
      responses:
        204: { description: The model state restored successfully }
        403: { description: The state date is corrupted (one possibility) }

  /{instance}/1/debug/output:
    get:
      parameters:
        - $ref: "#/parameters/instance"
      tags:
        - Engine
      operationId: scoop_debug_output
      produces:
        - application/json
      responses:
        200:
          description: Retrieves the output of the output debug transport
          schema:
            type: array
            items:
              type: string
